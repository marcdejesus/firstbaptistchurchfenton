// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // For connection pooling with Neon
}

model User {
  id           Int       @id @default(autoincrement())
  uuid         String    @unique @default(uuid())
  email        String    @unique
  name         String
  role         Role      @default(EDITOR)
  passwordHash String?   @map("password_hash")
  isActive     Boolean   @default(true) @map("is_active")
  lastLoginAt  DateTime? @map("last_login_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  pageContent           PageContent[]
  contentVersions       ContentVersion[]
  blogPosts             BlogPost[]
  blogPostRevisions     BlogPostRevision[]
  mediaLibrary          MediaLibrary[]
  systemSettings        SystemSetting[]
  calendarSettings      CalendarSetting[]
  activityLogs          ActivityLog[]
  volunteerSignups      VolunteerSignup[]

  @@map("users")
}

model MediaLibrary {
  id           Int       @id @default(autoincrement())
  uuid         String    @unique @default(uuid())
  filename     String
  originalName String    @map("original_name")
  filePath     String    @map("file_path")
  fileUrl      String    @map("file_url")
  fileSize     Int       @map("file_size")
  mimeType     String    @map("mime_type")
  width        Int?
  height       Int?
  altText      String?   @map("alt_text")
  caption      String?
  folder       String    @default("general")
  tags         String[]
  isOptimized  Boolean   @default(false) @map("is_optimized")
  uploadedById Int?      @map("uploaded_by")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  uploadedBy       User?        @relation(fields: [uploadedById], references: [id], onDelete: SetNull)
  pageContent      PageContent[]
  contentVersions  ContentVersion[]
  blogPosts        BlogPost[]

  @@map("media_library")
}

model EditableArea {
  id           Int     @id @default(autoincrement())
  pageSlug     String  @map("page_slug")
  areaKey      String  @map("area_key")
  areaLabel    String  @map("area_label")
  contentType  ContentType @map("content_type")
  defaultValue String? @map("default_value")
  helpText     String? @map("help_text")
  isRequired   Boolean @default(false) @map("is_required")
  maxLength    Int?    @map("max_length")
  displayOrder Int     @default(0) @map("display_order")
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  @@unique([pageSlug, areaKey])
  @@map("editable_areas")
}

model PageContent {
  id           Int      @id @default(autoincrement())
  pageSlug     String   @map("page_slug")
  sectionKey   String   @map("section_key")
  contentType  ContentType @map("content_type")
  contentValue String?  @map("content_value")
  altText      String?  @map("alt_text")
  mediaId      Int?     @map("media_id")
  displayOrder Int      @default(0) @map("display_order")
  isActive     Boolean  @default(true) @map("is_active")
  version      Int      @default(1)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  updatedById  Int?     @map("updated_by")

  // Relations
  media       MediaLibrary?    @relation(fields: [mediaId], references: [id], onDelete: SetNull)
  updatedBy   User?            @relation(fields: [updatedById], references: [id], onDelete: SetNull)
  versions    ContentVersion[]

  @@unique([pageSlug, sectionKey])
  @@map("page_content")
}

model ContentVersion {
  id               Int      @id @default(autoincrement())
  pageContentId    Int      @map("page_content_id")
  contentValue     String?  @map("content_value")
  altText          String?  @map("alt_text")
  mediaId          Int?     @map("media_id")
  versionNumber    Int      @map("version_number")
  changeDescription String? @map("change_description")
  createdAt        DateTime @default(now()) @map("created_at")
  createdById      Int?     @map("created_by")

  // Relations
  pageContent PageContent   @relation(fields: [pageContentId], references: [id], onDelete: Cascade)
  media       MediaLibrary? @relation(fields: [mediaId], references: [id], onDelete: SetNull)
  createdBy   User?         @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@map("content_versions")
}

model BlogCategory {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  slug         String   @unique
  description  String?
  color        String?  // Hex color code
  displayOrder Int      @default(0) @map("display_order")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  blogPosts BlogPost[]

  @@map("blog_categories")
}

model BlogPost {
  id               Int       @id @default(autoincrement())
  uuid             String    @unique @default(uuid())
  title            String
  slug             String    @unique
  excerpt          String?
  content          String?
  featuredImageId  Int?      @map("featured_image_id")
  categoryId       Int?      @map("category_id")
  status           PostStatus @default(DRAFT)
  publishedAt      DateTime? @map("published_at")
  scheduledFor     DateTime? @map("scheduled_for")
  seoTitle         String?   @map("seo_title")
  seoDescription   String?   @map("seo_description")
  tags             String[]
  viewCount        Int       @default(0) @map("view_count")
  isFeatured       Boolean   @default(false) @map("is_featured")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  authorId         Int?      @map("author_id")

  // Relations
  featuredImage MediaLibrary?      @relation(fields: [featuredImageId], references: [id], onDelete: SetNull)
  category      BlogCategory?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  author        User?              @relation(fields: [authorId], references: [id], onDelete: SetNull)
  revisions     BlogPostRevision[]

  @@map("blog_posts")
}

model BlogPostRevision {
  id           Int      @id @default(autoincrement())
  blogPostId   Int      @map("blog_post_id")
  title        String
  excerpt      String?
  content      String?
  revisionNote String?  @map("revision_note")
  createdAt    DateTime @default(now()) @map("created_at")
  createdById  Int?     @map("created_by")

  // Relations
  blogPost  BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  createdBy User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@map("blog_post_revisions")
}

model CalendarSetting {
  id          Int      @id @default(autoincrement())
  settingKey  String   @unique @map("setting_key")
  settingValue String? @map("setting_value")
  isEncrypted Boolean  @default(false) @map("is_encrypted")
  description String?
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById Int?     @map("updated_by")

  // Relations
  updatedBy User? @relation(fields: [updatedById], references: [id], onDelete: SetNull)

  @@map("calendar_settings")
}

model SystemSetting {
  id           Int      @id @default(autoincrement())
  settingGroup String   @map("setting_group")
  settingKey   String   @map("setting_key")
  settingValue String?  @map("setting_value")
  settingType  SettingType @default(STRING) @map("setting_type")
  description  String?
  isPublic     Boolean  @default(false) @map("is_public")
  updatedAt    DateTime @updatedAt @map("updated_at")
  updatedById  Int?     @map("updated_by")

  // Relations
  updatedBy User? @relation(fields: [updatedById], references: [id], onDelete: SetNull)

  @@unique([settingGroup, settingKey])
  @@map("system_settings")
}

model ActivityLog {
  id           Int      @id @default(autoincrement())
  userId       Int?     @map("user_id")
  action       String
  resourceType String   @map("resource_type")
  resourceId   Int?     @map("resource_id")
  oldValues    Json?    @map("old_values")
  newValues    Json?    @map("new_values")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("activity_log")
}

// New model for volunteer signups (currently used in Firebase)
model VolunteerSignup {
  id            Int      @id @default(autoincrement())
  opportunityId String   @map("opportunity_id")
  userId        Int      @map("user_id")
  message       String?
  status        VolunteerStatus @default(PENDING)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("volunteer_signups")
}

// Prayer requests model
model PrayerRequest {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  message   String
  isPublic  Boolean  @default(false) @map("is_public")
  isAnswered Boolean @default(false) @map("is_answered")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("prayer_requests")
}

// Contact form submissions
model ContactSubmission {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  message   String
  phone     String?
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("contact_submissions")
}

// Enums
enum Role {
  ADMIN
  EDITOR
  VIEWER
}

enum ContentType {
  TEXT
  HTML
  IMAGE
  URL
  BOOLEAN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

enum VolunteerStatus {
  PENDING
  CONFIRMED
  DECLINED
}
